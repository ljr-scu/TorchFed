import torch

from torchfed.modules.compressor.Compressor import Compressor

#基于阈值的梯度压缩方法，用于在梯度小于某个阈值时将其丢弃，
class ThresholdCompressor(Compressor):

    def __init__(self, threshold):
        super().__init__()
        self.threshold = threshold

    def compress(self, tensor, name):
        shape = tensor.size()
        tensor = tensor.flatten()
        numel = tensor.numel()

        indices, = torch.where(tensor.abs() > self.threshold)
        values = tensor[indices]
        ctx = shape, numel
        tensor_compressed = values,indices
        return tensor_compressed, ctx

    def decompress(self, tensor_compressed, ctx):
        shape, numel = ctx
        values, indices = tensor_compressed
        tensor_decompressed = torch.zeros(numel, dtype=values.dtype, layout=values.layout, device=values.device)
        tensor_decompressed.scatter_(0, indices, values)
        return tensor_decompressed.view(shape)


    #threshold = 0.001
    # 初始参数： < class 'torch.Tensor'>, tensor([1.0835e-03, -1.9194e-02, 1.0981e-02, 4.0711e-02, 0.0000e+00,
    # 0.0000e+00, 0.0000e+00, 7.7840e-05, 1.7313e-03, 1.5672e-02,
    # 1.7900e-02, -6.0619e-03, 0.0000e+00, 1.9120e-02, 2.4405e-02,
    # 1.9472e-06, 1.1564e-02, 8.3467e-03, 2.4422e-02, -4.8336e-03,
    # -2.2308e-02, -1.7301e-06, 1.6052e-02, 0.0000e+00, 8.3491e-03,
    # 0.0000e+00, 6.3977e-06, 6.7088e-03, 3.5839e-03, 0.0000e+00,
    # -3.6481e-03, 1.8390e-02, 2.3239e-02, 5.0395e-05, 1.7352e-02,
    # 1.5241e-02, 1.7627e-03, 5.9985e-03, 0.0000e+00, 0.0000e+00,
    # 5.3617e-05, 1.3747e-02, 5.3312e-04, 9.1604e-03, 3.3199e-05,
    # 0.0000e+00, -1.3150e-02, -2.1022e-02, 0.0000e+00, 1.1844e-02,
    # -3.1931e-03, 0.0000e+00, 1.4837e-02, 2.8502e-03, -2.7814e-03,
    # 3.3425e-03, -6.3944e-04, 1.0378e-02, 8.9999e-03, 0.0000e+00,
    # 7.5472e-05, 0.0000e+00, 9.5349e-03, 0.0000e+00])
    #
    # 压缩的参数： <class 'tuple'>, (tensor([0.0011, -0.0192, 0.0110, 0.0407, 0.0017, 0.0157, 0.0179, -0.0061,
    # 0.0191, 0.0244, 0.0116, 0.0083, 0.0244, -0.0048, -0.0223, 0.0161,
    # 0.0083, 0.0067, 0.0036, -0.0036, 0.0184, 0.0232, 0.0174, 0.0152,
    # 0.0018, 0.0060, 0.0137, 0.0005, 0.0092, -0.0132, -0.0210, 0.0118,
    # -0.0032, 0.0148, 0.0029, -0.0028, 0.0033, -0.0006, 0.0104, 0.0090,
    # 0.0095]), tensor([0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 22, 24, 27,
    # 28, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 46, 47, 49, 50, 52, 53, 54,
    # 55, 56, 57, 58, 62]))
    #
    # shape： <
    #
    # class 'tuple'>, (torch.Size([64]), 64)
    #
    # 解压缩后的参数： <
    #
    # class 'torch.Tensor'>, tensor([0.0011, -0.0192, 0.0110, 0.0407, 0.0000, 0.0000, 0.0000, 0.0000,
    # 0.0017, 0.0157, 0.0179, -0.0061, 0.0000, 0.0191, 0.0244, 0.0000,
    # 0.0116, 0.0083, 0.0244, -0.0048, -0.0223, 0.0000, 0.0161, 0.0000,
    # 0.0083, 0.0000, 0.0000, 0.0067, 0.0036, 0.0000, -0.0036, 0.0184,
    # 0.0232, 0.0000, 0.0174, 0.0152, 0.0018, 0.0060, 0.0000, 0.0000,
    # 0.0000, 0.0137, 0.0005, 0.0092, 0.0000, 0.0000, -0.0132, -0.0210,
    # 0.0000, 0.0118, -0.0032, 0.0000, 0.0148, 0.0029, -0.0028, 0.0033,
    # -0.0006, 0.0104, 0.0090, 0.0000, 0.0000, 0.0000, 0.0095, 0.0000])
